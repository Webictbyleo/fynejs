{"version":3,"file":"x-tool.min.js","names":["Object","defineProperty","exports","value","stripTypes","source","isIdentifierStart","ch","test","isIdentifierPart","skipGenerics","tokens","startIndex","token","depth","i","length","type","TokenType","Punctuation","tokenize","input","start","quoteType","pos","push","Whitespace","slice","end","Comment","keywords","has","Keyword","Identifier","Number","String","output","outputParts","newOutput","Set","join"],"sourceRoot":"./dist","sources":["strip-ts.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.stripTypes = stripTypes;\nfunction stripTypes(source) {\n    var TokenType;\n    (function (TokenType) {\n        TokenType[TokenType[\"Identifier\"] = 0] = \"Identifier\";\n        TokenType[TokenType[\"Keyword\"] = 1] = \"Keyword\";\n        TokenType[TokenType[\"Punctuation\"] = 2] = \"Punctuation\";\n        TokenType[TokenType[\"String\"] = 3] = \"String\";\n        TokenType[TokenType[\"Template\"] = 4] = \"Template\";\n        TokenType[TokenType[\"RegExp\"] = 5] = \"RegExp\";\n        TokenType[TokenType[\"Comment\"] = 6] = \"Comment\";\n        TokenType[TokenType[\"Whitespace\"] = 7] = \"Whitespace\";\n        TokenType[TokenType[\"Number\"] = 8] = \"Number\";\n        TokenType[TokenType[\"Unknown\"] = 9] = \"Unknown\";\n    })(TokenType || (TokenType = {}));\n    var keywords = new Set([\n        'as', 'interface', 'type', 'import', 'export', 'from', 'extends', 'implements',\n        'readonly', 'declare', 'namespace', 'module', 'any', 'unknown', 'never', 'void',\n        'number', 'string', 'boolean', 'symbol', 'bigint', 'object'\n    ]);\n    function isIdentifierStart(ch) {\n        return /[a-zA-Z_$]/.test(ch);\n    }\n    function isIdentifierPart(ch) {\n        return /[a-zA-Z0-9_$]/.test(ch);\n    }\n    function skipGenerics(tokens, startIndex) {\n        var depth = 0;\n        var i = startIndex;\n        while (i < tokens.length) {\n            var token = tokens[i];\n            if (token.type === TokenType.Punctuation) {\n                if (token.value === '<') {\n                    depth++;\n                }\n                else if (token.value === '>') {\n                    depth--;\n                    if (depth === 0) {\n                        return i + 1;\n                    }\n                }\n            }\n            i++;\n        }\n        return startIndex;\n    }\n    function tokenize(input) {\n        var tokens = [];\n        var pos = 0;\n        var length = input.length;\n        while (pos < length) {\n            var ch = input[pos];\n            if (/\\s/.test(ch)) {\n                var start = pos;\n                while (pos < length && /\\s/.test(input[pos]))\n                    pos++;\n                tokens.push({ type: TokenType.Whitespace, value: input.slice(start, pos), start: start, end: pos });\n                continue;\n            }\n            if (ch === '/') {\n                if (input[pos + 1] === '/') {\n                    var start = pos;\n                    pos += 2;\n                    while (pos < length && input[pos] !== '\\n')\n                        pos++;\n                    tokens.push({ type: TokenType.Comment, value: input.slice(start, pos), start: start, end: pos });\n                    continue;\n                }\n                else if (input[pos + 1] === '*') {\n                    var start = pos;\n                    pos += 2;\n                    while (pos < length && !(input[pos] === '*' && input[pos + 1] === '/'))\n                        pos++;\n                    pos += 2;\n                    tokens.push({ type: TokenType.Comment, value: input.slice(start, pos), start: start, end: pos });\n                    continue;\n                }\n            }\n            if (ch === '\"' || ch === \"'\" || ch === '`') {\n                var start = pos;\n                var quoteType = ch;\n                pos++;\n                while (pos < length) {\n                    if (input[pos] === '\\\\') {\n                        pos += 2;\n                    }\n                    else if (input[pos] === quoteType) {\n                        pos++;\n                        break;\n                    }\n                    else {\n                        pos++;\n                    }\n                }\n                tokens.push({ type: TokenType.String, value: input.slice(start, pos), start: start, end: pos });\n                continue;\n            }\n            if (isIdentifierStart(ch)) {\n                var start = pos;\n                pos++;\n                while (pos < length && isIdentifierPart(input[pos]))\n                    pos++;\n                var value = input.slice(start, pos);\n                var type = keywords.has(value) ? TokenType.Keyword : TokenType.Identifier;\n                tokens.push({ type: type, value: value, start: start, end: pos });\n                continue;\n            }\n            if (/\\d/.test(ch)) {\n                var start = pos;\n                pos++;\n                while (pos < length && /\\d/.test(input[pos]))\n                    pos++;\n                tokens.push({ type: TokenType.Number, value: input.slice(start, pos), start: start, end: pos });\n                continue;\n            }\n            tokens.push({ type: TokenType.Punctuation, value: ch, start: pos, end: pos + 1 });\n            pos++;\n        }\n        return tokens;\n    }\n    var output = '';\n    while (true) {\n        var tokens = tokenize(source);\n        var i = 0;\n        var outputParts = [];\n        var contextStack = [];\n        while (i < tokens.length) {\n            var token = tokens[i];\n            if (token.type === TokenType.Keyword && (token.value === 'interface' || token.value === 'type')) {\n                i++;\n                while (i < tokens.length && !(tokens[i].type === TokenType.Punctuation && (tokens[i].value === ';' || tokens[i].value === '}'))) {\n                    i++;\n                }\n                i++;\n                continue;\n            }\n            if (token.type === TokenType.Keyword && (token.value === 'import' || token.value === 'export')) {\n                outputParts.push(token.value);\n                i++;\n                if (i < tokens.length && tokens[i].type === TokenType.Keyword && tokens[i].value === 'type') {\n                    i++;\n                }\n                continue;\n            }\n            if (token.type === TokenType.Keyword && token.value === 'as') {\n                i++;\n                while (i < tokens.length && !(tokens[i].type === TokenType.Punctuation &&\n                    (tokens[i].value === ',' || tokens[i].value === ';' || tokens[i].value === '}' || tokens[i].value === ')'))) {\n                    i++;\n                }\n                continue;\n            }\n            console.log('Processing identifier/keyword:', token.value);\n            if (token.type === TokenType.Identifier || token.type === TokenType.Keyword) {\n                outputParts.push(token.value);\n                i++;\n                if (i < tokens.length && tokens[i].type === TokenType.Punctuation && tokens[i].value === '<') {\n                    i = skipGenerics(tokens, i);\n                }\n                continue;\n            }\n            outputParts.push(token.value);\n            i++;\n        }\n        var newOutput = outputParts.join('');\n        if (newOutput === source) {\n            output = newOutput;\n            break;\n        }\n        source = newOutput;\n    }\n    return output;\n}\n"],"mappings":"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","ignoreList":[]}
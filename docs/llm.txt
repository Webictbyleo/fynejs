# FyneJS/X-Tool - LLM Quick Reference

## Package Information

**GitHub Repository:** https://github.com/Webictbyleo/fynejs

**TypeScript Definitions:** https://github.com/Webictbyleo/fynejs/blob/main/types.d.ts

**NPM Package:** https://www.npmjs.com/package/fynejs

## Supported Directives

### Core Directives
- `x-data` - Component initialization with reactive data
- `x-text` - Text content binding
- `x-html` - HTML content binding (raw HTML)
- `x-show` - Toggle visibility (display: none)
- `x-if` / `x-else-if` / `x-else` - Conditional rendering (DOM removal)
- `x-for` - List rendering with template support
- `x-model` - Two-way data binding for form inputs
- `x-init` - Component initialization code

### Attribute Directives
- `x-bind:attribute` or `x:attribute` - Dynamic attribute binding
- `x-style` - Dynamic style binding (object or string)
- `x-class` - Dynamic class binding (string, array, or object)

### Event Directives
- `x-on:event` or `@event` - Event listener binding

### Component Directives
- `x-prop` - Reactive props for components
- `<component source="name">` - Reusable component instances

### Special Directives
- `x-intersect` - Trigger actions when elements enter/leave viewport (IntersectionObserver)
  - `x-intersect:enter` - Fire when element enters viewport
  - `x-intersect:leave` - Fire when element leaves viewport
  - `x-intersect:enter.once` - Fire only once when entering

## Event Modifiers

### Execution Control
- `.prevent` - Calls `preventDefault()`
- `.stop` - Calls `stopPropagation()`
- `.self` - Only trigger if event target is the element itself
- `.once` - Remove listener after first execution
- `.passive` - Add passive event listener
- `.capture` - Use capture phase
- `.defer` - Execute handler in next microtask

### Key Modifiers
- `.enter` - Only trigger on Enter key
- `.esc` / `.escape` - Only trigger on Escape key
- `.space` - Only trigger on Space key
- `.tab` - Only trigger on Tab key
- `.backspace` - Only trigger on Backspace key
- `.delete` / `.del` - Only trigger on Delete key
- `.arrowup` / `.up` - Only trigger on Arrow Up key
- `.arrowdown` / `.down` - Only trigger on Arrow Down key
- `.arrowleft` / `.left` - Only trigger on Arrow Left key
- `.arrowright` / `.right` - Only trigger on Arrow Right key
- `.home` - Only trigger on Home key
- `.end` - Only trigger on End key
- `.pageup` - Only trigger on Page Up key
- `.pagedown` - Only trigger on Page Down key

### Combination Key Modifiers
- `.ctrl` - Require Ctrl key to be pressed
- `.alt` - Require Alt key to be pressed
- `.shift` - Require Shift key to be pressed
- `.meta` - Require Meta/Cmd key to be pressed

### Mouse Button Modifiers
- `.left` - Only trigger on left mouse button
- `.middle` - Only trigger on middle mouse button
- `.right` - Only trigger on right mouse button

### Touch Modifiers
- `.single` - Only trigger with single touch point
- `.multi` - Only trigger with multiple touch points

### Special Modifiers
- `.outside` - Trigger when clicking outside the element

## HTML Template Literal Support

FyneJS provides an `html` template literal tag for IDE syntax highlighting:

```javascript
XTool.registerComponent({
    name: 'my-component',
    template: html`
        <div class="component">
            <h2 x-text="title"></h2>
            <p x-text="description"></p>
        </div>
    `
});
```

The `html` tag enables:
- Syntax highlighting in most IDEs (VS Code, IntelliJ, etc.)
- HTML IntelliSense and validation
- Proper formatting and indentation
- No new template syntax to learn - standard HTML

## TypeScript Support

FyneJS can run TypeScript component files directly in the browser without any build step:

```javascript
// Load TypeScript components (types are stripped automatically)
XTool.loadComponents([
  { path: 'components/user-card.ts', mode: 'preload' },
  { path: 'components/dashboard.ts', mode: 'defer' }
]);

// Works with .js files too
XTool.loadComponents([
  { path: 'components/modal.js', mode: 'lazy' }
]);
```

**Features:**
- Instant type stripping (token-based, blazing fast)
- No compilation or bundling required
- Mix `.ts` and `.js` files freely
- Full TypeScript syntax support (interfaces, types, generics, etc.)
- Types removed at runtime, no type checking (use IDE for that)

**Learn more:** https://fynejs.com/typescript.html

## Built-in SPA Router

FyneJS includes a complete single-page application router:

```javascript
  // Initialize FyneJS with router
  XTool.init({
    container: 'body',
    debug: false,
    router: {
      enabled: true,
      before: (to, from, info) => {
        console.log(\`Navigating: \${from} → \${to}\`);
        // Add analytics, auth checks, etc.
        return true;
      },
      after: (to, from, info) => {
        // Update active states, scroll to top, etc.
        window.scrollTo(0, 0);
      }
    }
  });
```

**Usage in HTML:**
```html
<!-- Basic routing -->
<a href="/about.html" x-link>About</a>

<!-- With prefetching -->
<a href="/dashboard.html" x-link x-prefetch="hover">Dashboard</a>
<a href="/profile.html" x-link x-prefetch="visible">Profile</a>
```

**Features:**
- View transitions with native View Transitions API
- Intelligent prefetching strategies (hover, visible, immediate)
- Navigation lifecycle hooks
- History/hash mode support
- Programmatic navigation
- No page reloads for smoother UX

**Learn more:** https://fynejs.com/router.html

## Multi-Page Project Setup

Recommended pattern for organizing multi-page FyneJS applications:

### 1. Central Setup File (demo-loader.js)
```javascript
(function() {
  const componentFiles = [
    'header.js',
    'footer.js',
    'user-card.ts',  // TypeScript!
    'modal.js'
  ];
  
  XTool.init({
    router: { enabled: true }
  });
  
  XTool.loadComponents(
    componentFiles.map(f => ({
      path: 'components/' + f,
      mode: 'preload'
    }))
  );
})();
```

### 2. Include in Every Page
```html
<!DOCTYPE html>
<html>
<head>
  <script src="../dist/x-tool.min.js" defer></script>
  <script src="./demo-loader.js" defer></script>
</head>
<body>
  <component source="header"></component>
  <main><!-- page content --></main>
  <component source="footer"></component>
</body>
</html>
```

### 3. Project Structure
```
project/
├── index.html
├── about.html
├── demo-loader.js      # Setup file
├── components/
│   ├── header.js
│   ├── footer.js
│   ├── user-card.ts    # TypeScript
│   └── modal.js
└── shared/
    └── styles.css
```

**Learn more:** https://fynejs.com/getting-started.html

## Documentation Links

- **Getting Started:** https://fynejs.com/getting-started.html
- **Directives Guide:** https://fynejs.com/directives.html
- **Components Guide:** https://fynejs.com/components.html
- **Router Documentation:** https://fynejs.com/router.html
- **TypeScript Support:** https://fynejs.com/typescript.html
- **API Reference:** https://fynejs.com/api.html
- **Examples:** https://fynejs.com/examples.html

## Key Features

- **TypeScript Without Build** - Run `.ts` component files directly in the browser with instant type stripping
- **Built-in SPA Router** - Client-side routing with view transitions, prefetching, and navigation hooks
- **Multiple Components per File** - Define multiple `x-data` components in single HTML files
- **Standard HTML Templates** - Uses familiar HTML syntax, no special template language
- **IDE Syntax Highlighting** - `html` template literal provides full IDE support
- **Zero Dependencies** - No external dependencies or build tools required
- **~18.6KB Gzipped** - Minimal bundle size with enterprise features
- **Comprehensive Auto-Cleanup** - Automatic memory management and resource cleanup
- **Event Delegation** - Optional global event delegation for performance
- **Static Directive Optimization** - Automatically detects and optimizes non-reactive directives